{"version":3,"sources":["api/getUsers.js","components/UserList/UserList.js","components/SelectSort/SelectSort.js","App.js","serviceWorker.js","index.js"],"names":["getUsers","UserList","user","key","company","className","firstname","lastname","email","phonenumber","birthday_contact","SelectSort","setUserSorted","userList","useEffect","sortByDay","sort","a","b","split","onChange","event","sortedUserList","target","value","App","useState","userSorted","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAAaA,EAAW,CACtB,CACE,UAAY,uCACZ,SAAW,uCACX,MAAQ,gBACR,YAAc,cACd,iBAAmB,aACnB,QAAU,aAEZ,CACE,UAAY,2BACZ,SAAW,uCACX,MAAQ,gBACR,YAAc,eACd,iBAAmB,aACnB,QAAU,aAEZ,CACE,UAAY,2BACZ,SAAW,mDACX,MAAQ,gBACR,YAAc,cACd,iBAAmB,aACnB,QAAU,aAEZ,CACE,UAAY,qBACZ,SAAW,iCACX,MAAQ,gBACR,YAAc,cACd,iBAAmB,aACnB,QAAU,aAGZ,CACE,UAAY,sBACZ,SAAW,kCACX,MAAQ,gBACR,YAAc,cACd,iBAAmB,aACnB,QAAU,cCtCDC,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,wBAAIC,IAAKD,EAAKE,SACV,wBAAIC,UAAU,aAAd,IAA4BH,EAAKI,UAAjC,KACA,wBAAID,UAAU,aAAd,IAA4BH,EAAKK,SAAjC,KACA,wBAAIF,UAAU,aAAd,IAA4BH,EAAKM,MAAjC,KACA,wBAAIH,UAAU,aAAd,IAA4BH,EAAKO,YAAjC,KACA,wBAAIJ,UAAU,aAAd,IAA4BH,EAAKQ,iBAAjC,KACA,wBAAIL,UAAU,aAAd,IAA4BH,EAAKE,QAAjC,OCRCO,EAAa,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAC1CC,qBAAU,WACRF,EAAcG,OACb,IAEH,IAAMA,EAAY,kBAAM,YAAIF,GACzBG,MAAK,SAACC,EAAGC,GAAJ,OACHD,EAAEP,iBAAiBS,MAAM,KAAK,IAAMD,EAAER,iBAAiBS,MAAM,KAAK,OA4BvE,OACE,4BAAQC,SArBW,SAACC,GAAW,IAE3BC,EAAiB,KAErB,OAHkBD,EAAME,OAAhBC,OAIN,IAAK,eACHF,EAAiBP,IACjB,MACF,IAAK,gBACHO,EAdoB,YAAIT,GAC3BG,MAAK,SAACC,EAAGC,GAAJ,OACHD,EAAEP,iBAAiBS,MAAM,KAAK,IAAMD,EAAER,iBAAiBS,MAAM,KAAK,MAajE,MACF,QACE,OAAON,EAKX,OAFAD,EAAcU,GAEPT,IAKL,4BAAQW,MAAM,gBAAd,gBACA,4BAAQA,MAAM,iBAAd,mB,MCJSC,MA9Bf,WAAgB,IAAD,EACuBC,mBAAS,YAAI1B,IADpC,mBACN2B,EADM,KACMf,EADN,KAGb,OACE,yBAAKP,UAAU,OACb,iDAEA,kBAAC,EAAD,CAAYO,cAAeA,EAAeC,SAAUc,IAEpD,2BAAOtB,UAAU,aACf,2BAAOA,UAAU,mBACf,wBAAIA,UAAU,4BACZ,wBAAIA,UAAU,+BAAd,QACA,wBAAIA,UAAU,+BAAd,WACA,wBAAIA,UAAU,+BAAd,SACA,wBAAIA,UAAU,+BAAd,eACA,wBAAIA,UAAU,+BAAd,YACA,wBAAIA,UAAU,+BAAd,aAGJ,+BAEIsB,EAAWC,KAAI,SAAA1B,GAAI,OAAI,kBAAC,EAAD,CAAUA,KAAMA,EAAMC,IAAKD,EAAKE,iBChB/CyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.adc6ab99.chunk.js","sourcesContent":["export const getUsers = [\r\n  {\r\n    \"firstname\":\"Виктор\",\r\n    \"lastname\":\"Петров\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"77777777777\",\r\n    \"birthday_contact\":\"1981-03-30\",\r\n    \"company\":\"Company 1\"\r\n  },\r\n  {\r\n    \"firstname\":\"Вася\",\r\n    \"lastname\":\"Пупкин\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"333333333333\",\r\n    \"birthday_contact\":\"2004-10-20\",\r\n    \"company\":\"Company 2\"\r\n  },\r\n  {\r\n    \"firstname\":\"Дима\",\r\n    \"lastname\":\"Коршунов\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"22222222222\",\r\n    \"birthday_contact\":\"1991-07-16\",\r\n    \"company\":\"Company 3\"\r\n  },\r\n  {\r\n    \"firstname\":\"Сан\",\r\n    \"lastname\":\"Саныч\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"33333333333\",\r\n    \"birthday_contact\":\"1998-07-03\",\r\n    \"company\":\"Company 4\"\r\n  },\r\n\r\n  {\r\n    \"firstname\":\"Сан1\",\r\n    \"lastname\":\"Саныч1\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"33333333333\",\r\n    \"birthday_contact\":\"1998-03-13\",\r\n    \"company\":\"Company 5\"\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nexport const UserList = ({ user }) => {\r\n    return (\r\n        <tr key={user.company} >\r\n            <td className=\"user-item\"> {user.firstname} </td>\r\n            <td className=\"user-item\"> {user.lastname} </td>\r\n            <td className=\"user-item\"> {user.email} </td>\r\n            <td className=\"user-item\"> {user.phonenumber} </td>\r\n            <td className=\"user-item\"> {user.birthday_contact} </td>\r\n            <td className=\"user-item\"> {user.company} </td>\r\n        </tr>\r\n    )\r\n};\r\n","import React, { useEffect } from 'react';\n\nexport const SelectSort = ({ setUserSorted, userList }) => {\n  useEffect(() => {\n    setUserSorted(sortByDay());\n  }, []);\n\n  const sortByDay = () => [...userList]\n    .sort((a, b) => (\n      +a.birthday_contact.split('-')[2] - +b.birthday_contact.split('-')[2]\n    ));\n\n  const sortByMonth = () => [...userList]\n    .sort((a, b) => (\n      +a.birthday_contact.split('-')[1] - +b.birthday_contact.split('-')[1]\n    ));\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n    let sortedUserList = null;\n\n    switch (value) {\n      case 'Sort_By_Date':\n        sortedUserList = sortByDay();\n        break;\n      case 'Sort_By_Month':\n        sortedUserList = sortByMonth();\n        break;\n      default:\n        return userList;\n    }\n\n    setUserSorted(sortedUserList);\n\n    return userList;\n  };\n\n  return (\n    <select onChange={handleChange}>\n      <option value=\"Sort_By_Date\">Sort By Date</option>\n      <option value=\"Sort_By_Month\">Sort By Month</option>\n    </select>\n  );\n};\n","import React, { useState } from 'react';\nimport { getUsers } from './api/getUsers';\nimport { UserList } from './components/UserList/UserList';\nimport { SelectSort } from './components/SelectSort/SelectSort';\nimport './App.css';\n\nfunction App() {\n  const [userSorted, setUserSorted] = useState([...getUsers]);\n\n  return (\n    <div className=\"App\">\n      <h1>Mosaic test sort!</h1>\n\n      <SelectSort setUserSorted={setUserSorted} userList={userSorted} />\n\n      <table className=\"user-list\">\n        <thead className=\"user-list-title\">\n          <tr className=\"user-list-title-item-row\">\n            <td className=\"user-list-title-item-column\">Name</td>\n            <td className=\"user-list-title-item-column\">Surname</td>\n            <td className=\"user-list-title-item-column\">Email</td>\n            <td className=\"user-list-title-item-column\">phonenumber</td>\n            <td className=\"user-list-title-item-column\">Birthday</td>\n            <td className=\"user-list-title-item-column\">company</td>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            userSorted.map(user => <UserList user={user} key={user.company} />)\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}